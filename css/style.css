/* VARIABLES (reusable values). root means "set it at the root and it cascades down. root refers to the html file. it's like a global wrapper around everything. double dash is what creates the variable.  */
:root {
    /* what you write after the 2 dashes is up to you, we're using green but it can be named anything */
    --green: #28ff8a;
}

/* RESETS are universal selectors for every element to reset their values to something else. "before I do anything else on the page, I want all elements to have this background, margin, etc. */
body {
    background: #1222fd;
    margin: 0;
    font-family: sans-serif;
    overflow-x: hidden;
}

h3 {
    margin: 0;
}

a {
    text-decoration:none
}

/* Animations typically go between resets and custom styles */
/* ANIMATIONS */
/* slide-in is a name you create, you will call into it later */
@keyframes slide-in {
    from {
        /* move it 300% off it's width, to the left. start the transition here (at the first frame) */
        transform: translateX(-300%)
    }
    
    /* css will automatically create the inbetween frames for you or you can define them in the middle here (example .5% */

    to 100%{
        /* initial means 0. and this is the end frame */
        transform: translateX(0);
    }

}


/* CUSTOM STYLES */

header {
/* Alights the direct children on a row left to right */
display: flex;
/* Once you set display: flex, you can align items vertically and horizontally with flexbox properties */
 /*Align items will align the dirtect children on the y-axis (top to bottom)  */
 align-items : center;
 /* Push the direct children as far apart as possible using the space between them (x-axis*/
 /* justify-content: space-between */
 background: #191c2fde;
 padding: 25px 7% 20px;
}

header nav {
/* Percentage values are always a percentage of the parent's values (width/height) */
margin-left: 150px;
}

header a {
    color: #fdab0c;
}

header a:hover, header a.active {
    text-decoration: underline;
}

header nav a {
    color: #fff;
}

header nav a:not(:last-child) {
    margin-right: 10px;
}

/* remember that sizes go clockwise */
/* percentage is a percetage of the parent value's size. if parent decreases, so does the child */
main {
    display: flex;
    justify-content: space-between;
    padding: 45px 10%, 0, 3%;
}

section p {
    /* var is calling upon the variable */
    color: var(--green)
}

/* pixels doesn't change. rem makes font size 3 the amount of pixels. rem root estimated value. it's saying 3 of whatever the browser's style sheet is. 16 base amound. if a style sheet is px and rem is set to 1, it's 16. if a value isn't set manually, it will always fall back to the initial pixel size of 16  */
section h1 {
    color: #ffff;
    font-size: 3rem;
    /* font-size: 1em; em would be 100% the size of parent's font size. 2em would be 200%. take the parent value and multiply it by whatever you set. 1em is exactly the same as adding 100%  */
    text-transform: uppercase;
    /* margin added some spacing */
    margin: 0 0 25px;
    /* animation defined above, calling to it here */
    animation: slide-in 2s;
}
/* we add padding to make the border bigger. padding is set this way because we only wanted padding on the left. transition means if any property changes, take .4 seconds for that to happen */
section button{
    background: none;
    border: 2px solid var(green);
    padding: 0 0 0 15px;
    color: #fff;
    text-transform: uppercase;
    cursor: pointer;
    display: flex;
    align-items: center;
    /* transition is best on the element selcetor itself and not on the actual state. if you put transition on the hover (the state), it wouldn't look as good. the animation won't complete and the button would jerk backwards. */
    transition: all .4s;
}
/* editing the arrow that we copied from fontaweseom */
section button i {
    color: #191c2fde;
    font-size: 1.5rem;
    background: var(green);
    padding: 10px 15px;
    margin-left: 15px;
}
/* here we can target a user's actionable state. in this example, we are targeting when the mouse hovers over the button */
section button:hover {
    background: #28ff8a;
    color: #191c2fde;
    /* translateX moves button left to right, along the X-axis  */
    transform: translateX(10px);
}
/* when you want to use flex box, you target the parent of the elements you want to affect! */
aside {
    display: flex;
    /* aligns the items centered */
    align-items: center;
    /* margin would push icons away. we can use right because we don't need to set the other 3. */
    margin-right: 15px;
    /* transform rotate will  */
    transform: rotate(90deg);
    /* position relative means position means relative to where it is currently. moving AWAY FROM the top, down 100 px, AWAY FROM the left, 50 px. If you put a negative value, that means move TOWARDS that position. */
    position: relative;
    top: 100px;
    left: 50px;
}
/* you are calling on the variable function to output this variable */
aside p {
    color: var(--green)
}

aside i {
    color: #fff;
    margin-right: 8px;
}